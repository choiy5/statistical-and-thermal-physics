package  org.opensourcephysics.stp.demon.demonlattice;import org.opensourcephysics.controls.*;import org.opensourcephysics.frames.*;public class DemonLatticeApp extends AbstractSimulation {  DemonLattice demon = new DemonLattice();  PlotFrame ePlot = new PlotFrame("E", "ln (P(E))", "Demon Energy distribution");  PlotFrame nPlot = new PlotFrame("N", "ln (P(N))", "Demon Number distribution");  DisplayFrame display = new DisplayFrame("x","p","Phase Space Lattice");  public void initialize() {	 demon.N = control.getInt("N");	 demon.L = control.getInt("L");     demon.pmax = control.getInt("Pmax");     demon.E = control.getInt("E");     demon.hc = control.getInt("Hard core");     demon.well = control.getInt("Attractive well");     demon.initialize();     display.addDrawable(demon);     display.setSquareAspect(false);     display.setPreferredMinMax(0,demon.L, -demon.Lp/2, demon.Lp/2);  }    public void stop() {   demon.averages();   control.println("e = " + demon.eave + " n = " + demon.nave + " mcs = " + demon.mcs);   control.println("E = " + demon.Eave + " N = " + demon.Nave);   control.println("accept = " + 1.0*demon.accept/demon.steps);  }      public void reset() {	 control.setValue("N", 100);	 control.setValue("L", 100);     control.setValue("Pmax", 10);     control.setValue("E", 200);     control.setValue("Hard core",0);     control.setValue("Attractive well",0);      control.setAdjustableValue("E for P(N,E)", 1);     control.setAdjustableValue("N for P(N,E)", 1);     control.setAdjustableValue("steps per display",10);      //    enableStepsPerDisplay(true);    }	    public void doStep() {      int stepsPerDisplay = control.getInt("steps per display");      for(int i = 0; i < stepsPerDisplay; i++)demon.demonStep();      display.setMessage("mcs = " + demon.mcs);  }     public void calculate() {     ePlot.clearData();     nPlot.clearData();     int e = control.getInt("E for P(N,E)");     int n = control.getInt("N for P(N,E)");     for(int i = 0; i < demon.arraySize; i++)       if(demon.p[i][n] > 0)          ePlot.append(0,i,Math.log(demon.p[i][n]*1.0/demon.steps));     for(int i = 0; i < demon.arraySize; i++)          if(demon.p[e][i] > 0)            nPlot.append(0,i,Math.log(demon.p[e][i]*1.0/demon.steps));     ePlot.render();     nPlot.render();  }        public void resetAverages() {      demon.reset();   }          public static void main (String[] args) {     SimulationControl control = SimulationControl.createApp(new DemonLatticeApp());     control.addButton("calculate","calculate");     control.addButton("resetAverages","Reset Averages");    }}